name: Build and Release Service

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Forced build'
  push:
    branches:
      - main
      - master
    paths:
      - '**/*.java'
      - '**/application.properties'
      - '**/resources/*'
      - '*.gradle'

jobs:
  build:
    name: Build Service Jar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: build/libs/*.jar



  prepare_release:
    name: Prepare release
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      new-tag: ${{ steps.new_version.outputs.NEW_TAG }}
      tag-message: ${{ steps.commit_messages.outputs.commit_messages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: tag_version
        run: |
          version=$(grep "version =" build.gradle | cut -d "'" -f2)
          if [[ -z "$version" ]]; then
            version=$(git describe --tags --abbrev=0 --match "v*" || echo "v0.0.0")
          fi
          echo "TAG=$version" >> $GITHUB_ENV
          
          real_version=$(git describe --tags --abbrev=0 --match "v*" || echo "v0.0.0")
          echo "REAL_OLD_TAG=$real_version" >> $GITHUB_ENV

      - name: Increment version
        id: new_version
        run: |
          latest_tag=${{ env.TAG }}
          major=$(echo "$latest_tag" | cut -d '.' -f1)
          minor=$(echo "$latest_tag" | cut -d '.' -f2)
          patch=$(echo "$latest_tag" | cut -d '.' -f3)
          if (( patch == 10 )); then
              patch=0
              if (( minor == 10 )); then
                minor=0
                major=$((major + 1))
              else
                minor=$((minor + 1))
              fi
          else
              patch=$((patch + 1))
          fi
          new_version="$major.$minor.$patch"
          echo "NEW_TAG=$new_version" >> $GITHUB_ENV
          echo "NEW_TAG=$new_version" >> $GITHUB_OUTPUT


      - name: Update build.gradle
        run: |
          new_version=${{ env.NEW_TAG }}
          sed -i "/version =/c\version = '$new_version'" build.gradle

      - name: Update docker-compose.yml
        run: |
          if [ -f docker-compose.yml ]; then
            repository_name="${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}"
            new_jar_name="$repository_name-${{ env.NEW_TAG }}.jar"  # Costruisce il nuovo nome del JAR
            sed -i'' -e "s|./build/libs/$repository_name-v[0-9]*\.[0-9]*\.[0-9]*\.jar|./build/libs/$new_jar_name|g" docker-compose.yml
          else
            echo "docker-compose.yml not found, skipping update."
          fi


      - name: Commit and push changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add build.gradle
          if [ -f docker-compose.yml ]; then
            git add docker-compose.yml
          fi
          git commit -m "Update build.gradle & docker-compose to ${{ env.NEW_TAG }}"
          git push

  release:
    name: Release Service
    needs: prepare_release
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: service-jar

      - name: Artifact rename
        run: |
          ls -l
          echo "Renaming artifact jar"
          mv *.jar ${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}-${{  needs.prepare_release.outputs.new-tag }}.jar
          ls -l

      - name: Creating Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: "latest"
          title: "Release ${{  needs.prepare_release.outputs.new-tag }}"
          files: |
            *.jar

  deploy:
    name: Deploy Service
    permissions: write-all
    environment: aws
    needs: [build, prepare_release]
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PATH: ${{ secrets.SSH_PATH }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
      ENV_FILE: ${{ secrets.ENV_FILE }}
      DEPLOY:   ${{ vars.DEPLOY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git pull origin ${{ github.ref_name }}


      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: service-jar

      - name: Artifact rename
        run: |
          echo "Renaming artifact jar"
          mv *.jar ${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}-${{  needs.prepare_release.outputs.new-tag }}.jar

      - name: Deploy
        run: |
          if  [ "$DEPLOY" != 1  ]; then
            echo "Skipping deployment due to missing requirements"
            exit 0
          fi
          
          if [ -z "$SSH_USER" ] || [ -z "$SSH_HOST" ] || [ -z "$SSH_PATH" ] || [ -z "$SSH_KEY" ]; then
            echo "Missing required environment variables"
            exit 1
          fi

          echo "Deploying service jar to server"
          
          artifact_name=$(ls *.jar)
          
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          
          echo "$ENV_FILE" > .env
          
          if [ ! -f "docker-compose.yml" ]; then
            echo "Missing docker-compose.yml"
            exit 1
          fi
          
          if [ ! -f "$artifact_name" ]; then
            echo "Missing service jar"
            exit 1
          fi
          
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST "mkdir -p $SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/build/libs"
          
          scp -o StrictHostKeyChecking=no -i key.pem *.jar $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/build/libs/$artifact_name
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i key.pem .env $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/.env
          scp -o StrictHostKeyChecking=no -i key.pem upservice.sh $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/upservice.sh
          
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST "cd $SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/} ; sudo chmod +x upservice.sh ; ./upservice.sh"

  clean:
    runs-on: ubuntu-latest
    needs: [ build, prepare_release, release, deploy ]
    if: always()
    name: Clean up
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: service-jar