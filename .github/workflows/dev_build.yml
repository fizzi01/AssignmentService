name: Dev Build

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Forced build'
  push:
    branches:
      - dev
    paths:
      - '**/*.java'
      - '**/application.properties'
      - '**/resources/*'
      - '*.gradle'

jobs:
  build:
    name: Build Service Jar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy Service
    permissions: write-all
    environment: aws
    needs: [ build, prepare_release ]
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PATH: ${{ secrets.SSH_PATH }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      ENV_FILE: ${{ secrets.ENV_FILE }}
      DEPLOY: ${{ vars.DEPLOY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: service-jar

      - name: Deploy
        run: |
          if  [ "$DEPLOY" != 2  ]; then
            echo "Skipping deployment due to missing requirements"
            exit 0
          fi

          if [ -z "$SSH_USER" ] || [ -z "$SSH_HOST" ] || [ -z "$SSH_PATH" ] || [ -z "$SSH_KEY" ]; then
            echo "Missing required environment variables"
            exit 1
          fi

          echo "Deploying service jar to server"

          artifact_name=$(ls *.jar)

          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem

          echo "$ENV_FILE" > .env

          if [ ! -f "docker-compose.yml" ]; then
            echo "Missing docker-compose.yml"
            exit 1
          fi

          if [ ! -f "$artifact_name" ]; then
            echo "Missing service jar"
            exit 1
          fi

          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST "mkdir -p $SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev/build/libs"

          scp -o StrictHostKeyChecking=no -i key.pem *.jar $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev/build/libs/$artifact_name
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i key.pem .env $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev/.env
          scp -o StrictHostKeyChecking=no -i key.pem upservice.sh $SSH_USER@$SSH_HOST:$SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev/upservice.sh
          
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST "cd $SSH_PATH${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}/dev ; sudo chmod +x upservice.sh ; ./upservice.sh"

  clean:
    runs-on: ubuntu-latest
    needs: [ build, deploy ]
    if: always()
    name: Clean up
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: service-jar